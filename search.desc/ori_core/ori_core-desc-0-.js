searchState.loadedDescShard("ori_core", 0, "Core library for the Ori UI framework.\nCanvas module.\nTypes pertaining to the clipboard.\nA channel for sending commands to the user interface.\nContexts for views.\nEvents and event handling.\nCreate a formatted <code>Text</code>.\nCreate a horizontal <code>Stack</code>.\nCreate a horizontal <code>Wrap</code>.\nImage data and processing.\nLayout of <code>View</code>s.\nConvenient imports for Ori.\nRebuild trait and derive macro.\nStyleing and theming.\nText rendering and layouting.\nTransition utilities.\nView module.\nThe builtin views in Ori.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Wrap</code>.\nWindowing system abstraction layer.\nCreate a new <code>ZStack</code> view.\nThe lines are joined with a beveled corner.\nWays to blend two colors.\nRadi of the corners on a <code>Quad</code>.\nThe border width of a <code>Quad</code>.\nThe end of the line is squared off.\nA canvas that can be drawn on.\nA canvas that can be drawn on.\nReplaces the destination with zero.\nA close verb.\nClose the curve.\nA color with red, green, blue and alpha components.\nA cubic verb.\nCubic bezier curve to a point.\nA bezier curve.\nAn iterator over the segments of a curve.\nA segment of a curve.\nA verb that describes the type of curve.\nPreserves the destination.\nDestination over source.\nA type for displaying a color as a hex string.\nA point is inside the shape if a ray from the point …\nA filled curve.\nRule determining if a point is inside a shape.\nAn image.\nA layer that can be transformed and masked.\nA line verb.\nLine to a point.\nWays to draw the end of a line.\nWays to join two lines.\nA mask that can be used to clip a layer.\nThe lines are joined with a sharp corner.\nA move verb.\nMove to a point.\nA point is inside the shape if a ray from the point …\nA paint that can be used to fill or stroke a shape.\nA pattern that can be used to fill a shape.\nA pattern.\nA primitive that can be drawn on a canvas.\nA quad verb.\nQuadratic bezier curve to a point.\nA rectangle.\nThe end of the line is rounded.\nThe lines are joined with a rounded corner.\nWays to fill a shape.\nA solid color.\nReplaces the destination with the source.\nSource over destination.\nThe end of the line is squared off and extends past the …\nProperties of a stroke.\nA stroked curve.\nA <code>BorderRadius</code> with zero radius on all corners.\nA <code>BorderWidth</code> with zero width on all borders.\nThe alpha component of the color.\nGet the alpha component as an 8 bit integer.\nCreate a new <code>BorderRadius</code> with the same radius on all …\nCreate a new <code>BorderWidth</code> with the same width on all …\nWhether the paint should be anti-aliased.\nThe blue component of the color.\nGet the blue component as an 8 bit integer.\nThe blend mode of the paint.\nThe bottom border width.\nThe bottom left corner radius.\nThe bottom right corner radius.\nGet the bounds of the curve.\nThe cap of the stroke.\nCreate a curve from a cicrle.\nClear the canvas.\nClear the curve, retaining the allocated memory for reuse.\nClose the contour.\nDraw a conic curve to a <code>point</code>, with a control point <code>control</code>…\nCheck if the curve contains a <code>point</code> using the given <code>rule</code>.\nCount the number of primitives.\nCount the number of primitives.\nDraw a cubic bezier curve to a <code>point</code>, with control points <code>a</code>…\nThe curve of the mask.\nDarken the color by the given <code>amount</code>.\nDesaturates the color by given <code>amount</code>.\nGet the difference between two canvases.\nFade the color by the given <code>amount</code>.\nFill a curve.\nThe fill rule of the mask.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe green component of the color.\nGet the green component as an 8 bit integer.\nCreate a new color with the given gray component.\nCreate a new color, with the given hex string.\nParse a color from a hex string.\nCreate a new color, with the given <code>hue</code>, <code>saturation</code> and …\nReturns a new color with the given hue, saturation, …\nCreate a new color, with the given <code>hue</code>, <code>saturation</code>, …\nReturns a new color with the given hue, saturation, …\nCreate a new color, with the given <code>hue</code>, <code>saturation</code> and …\nReturns a new color with the given hue, saturation and …\nCreate a new color, with the given <code>hue</code>, <code>saturation</code>, <code>value</code> …\nReturns a new color with the given hue, saturation, value …\nDraw an image.\nThe image of the pattern.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the curve is closed.\nCheck if the curve is empty.\nReturns true if the color is translucent.\nReturns true if the color is transparent.\nCheck if the curve is valid.\nGet an iterator over the curve segments.\nThe join of the stroke.\nDraw a layer.\nThe left border width.\nGet the number of verbs in the curve.\nBrighten the color by the given <code>amount</code>.\nDraw a line to a <code>point</code>.\nGet the luminocity.\nDraw a layer with a mask.\nGet the maximum radius of the corners.\nGet the minimum radius of the corners.\nThe miter limit of the stroke.\nLinearly interpolate between two colors.\nLinearly interpolate between two colors.\nMove to a <code>point</code>.\nCreate a new <code>BorderRadius</code>.\nCreate a new <code>BorderWidth</code>.\nCreate a new canvas.\nCreate a new canvas diff.\nCreate a new hex color display with the given <code>red</code>, <code>green</code>, …\nCreate a new curve.\nCreate a new color, with the given <code>hue</code>, <code>saturation</code> and …\nConvert a color from okhsl to sRGB.\nCreate a new color, with the given <code>hue</code>, <code>saturation</code>, …\nConvert a color from okhsl to sRGB.\nCreate a new color, with the given <code>hue</code>, <code>saturation</code> and …\nConvert a color from okhsv to sRGB.\nCreate a new color, with the given <code>hue</code>, <code>saturation</code>, <code>value</code> …\nConvert a color from okhsv to sRGB.\nCreate a new color, with the given <code>lightness</code>, <code>a</code> and <code>b</code> …\nConvert a color from oklab to sRGB.\nCreate a new color, with the given <code>lightness</code>, <code>a</code>, <code>b</code> and …\nConvert a color from oklab to sRGB.\nCreate a new color, with the given <code>lightness</code>, <code>chroma</code> and …\nConvert a color from oklch to sRGB.\nCreate a new color, with the given <code>lightness</code>, <code>chroma</code>, <code>hue</code> …\nConvert a color from oklch to sRGB.\nThe opacity of the pattern.\nCreate a curve from an oval.\nDraw an overlay.\nGet the number of points for the verb.\nGet the primitives of the canvas.\nPush an oval to the curve.\nPush a rectangle to the curve.\nPush the border of a rectangle with rounded corners to the …\nPush a rectangle with rounded corners to the curve.\nDraw a quadratic bezier curve to a <code>point</code>, with a control …\nThe red component of the color.\nGet the red component as an 8 bit integer.\nDraw a rectangle.\nCreate a curve from a rectangle.\nGet the rects of the diff.\nCreate a new color, with the given <code>red</code>, <code>green</code> and <code>blue</code> …\nCreate a new color with the given red, green and blue …\nCreate a new color, with the given <code>red</code>, <code>green</code>, <code>blue</code> and …\nCreate a new color with the given red, green, blue and …\nCreate a new color with the given red, green, blue and …\nThe right border width.\nSaturates the color by given <code>amount</code>.\nThe shader of the paint.\nSimplify the diff by merging rects when it makes sense.\nStroke a curve.\nConvert the color to hex.\nConvert the color to a hue, saturation, lightness tuple.\nConvert the color to a hue, saturation, lightness and …\nConvert the color to a hue, saturation, value tuple.\nConvert the color to a hue, saturation, value and alpha …\nConvert a color from sRGB to okhsl.\nConvert a color from sRGB to okhsl.\nConvert a color from sRGB to okhsv.\nConvert a color from sRGB to okhsv.\nConvert a color from sRGB to oklab.\nConvert a color from sRGB to oklab.\nConvert a color from sRGB to oklch.\nConvert a color from sRGB to oklch.\nConvert the color to linear sRGB.\nConvert the color to linear sRGB.\nThe top border width.\nThe top left corner radius.\nThe top right corner radius.\nDraw a layer with a transformation.\nTransform the curve by the given affine transform.\nThe transformation of the pattern.\nDraw a trigger rectangle.\nTry to parse a color from a hex string.\nUpdate the diff with new and old canvases.\nDraw a layer with a view.\nGet the view at a point.\nDraw a layer that does not affect the canvas.\nThe width of the stroke.\nThe curve to draw.\nThe curve to draw.\nThe fill rule of the curve.\nThe image to draw.\nThe mask of the layer.\nThe paint to fill the rectangle with.\nThe paint to fill the curve with.\nThe paint to stroke the curve with.\nThe top-left corner of the image.\nThe primitives of the layer.\nThe rectangle to draw.\nThe stroke properties of the curve.\nThe transformation of the layer.\nThe view of the layer.\nA clipboard.\nThe clipboard context.\nCreates a dummy clipboard, that does nothing.\nReturns the argument unchanged.\nReturns the contents of the clipboard.\nReturns the contents of the clipboard.\nCalls <code>U::from(self)</code>.\nCreates a new clipboard.\nSets the contents of the clipboard.\nSets the contents of the clipboard.\nA command.\nA clonable channel for sending <code>Command</code>s.\nA receiver for <code>Command</code>s.\nA waker for the event loop, triggered when a command is …\nSend a command.\nSpawn a future sending a command when it completes.\nSend a command without waking the event loop.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to downcast the command to <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the command is of type <code>T</code>.\nGet the name of the command.\nCreate a new <code>CommandWaker</code>.\nCreate a new command.\nCreate a new <code>CommandProxy</code> channel.\nSpawn a future that is polled when commands are handled.\nConvert the command into a boxed <code>Any</code> value.\nTry receive a command.\nWake the event loop.\nWake the event loop.\nA base context that is shared between all other contexts.\nA context for building the view tree.\nA context for a view.\nA context for drawing the view tree.\nA context for handling events.\nA context for laying out the view tree.\nA context for rebuilding the view tree.\nGet whether the view’s active state changed.\nRequest an animation frame.\nRequest an animation frame.\nRequest an animation frame.\nGet a build context.\nGet a rebuild context.\nGet a build context.\nGet the canvas.\nCreate a child context.\nCreate a child context.\nCreate a child context.\nCreate a child context.\nCreate a child context.\nGet the <code>Clipboard</code>.\nEmit a command.\nSpawn a future sending a command when it completes.\nCheck if the context is present.\nCheck if a context is contained.\nGet a context.\nGet a mutable context.\nGet a context or insert a <code>default</code>.\nGet a reference to the <code>Contexts</code>.\nGet a mutable reference to the <code>Contexts</code>.\nFill a curve.\nDraw a rectangle.\nGet the flex of the view.\nGet the flex of the view.\nGet the flex of the view.\nGet the flex of the view.\nGet the flex of the view.\nGet whether the view’s focused state changed.\nGet the <code>Fonts</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a context.\nGet a context.\nGet a mutable context.\nGet a mutable context.\nGet a context or insert a <code>default</code>.\nGet whether a child view was active last call.\nGet whether a child view was focused last call.\nGet whether a child view was hot last call.\nGet whether a child view is active.\nGet whether a child view is active.\nGet whether a child view is active.\nGet whether a child view is active.\nGet whether a child view is active.\nGet whether a child view’s active state changed.\nGet whether a child view is focused.\nGet whether a child view is focused.\nGet whether a child view is focused.\nGet whether a child view is focused.\nGet whether a child view is focused.\nGet whether a child view’s focused state changed.\nGet whether a child view is hot.\nGet whether a child view is hot.\nGet whether a child view is hot.\nGet whether a child view is hot.\nGet whether a child view is hot.\nGet whether a child view’s hot state changed.\nGet whether the view’s hot state changed.\nDraw a hoverable layer.\nGet the id of the view.\nGet the id of the view.\nGet the id of the view.\nGet the id of the view.\nGet the id of the view.\nDraw an image.\nPush a context.\nInsert a context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether the view is active.\nGet whether the view is active.\nGet whether the view is active.\nGet whether the view is active.\nGet whether the view is active.\nCheck if there are no contexts.\nGet whether the view is focused.\nGet whether the view is focused.\nGet whether the view is focused.\nGet whether the view is focused.\nGet whether the view is focused.\nGet whether the view is hot.\nGet whether the view is hot.\nGet whether the view is hot.\nGet whether the view is hot.\nGet whether the view is hot.\nGet whether the view is tight.\nGet whether the view is tight.\nGet whether the view is tight.\nGet whether the view is tight.\nGet whether the view is tight.\nDraw a layer.\nGet a layout context.\nGet the number of contexts.\nTransform a point from global space to local space.\nDraw a layer with a mask.\nCreate a new base context.\nCreate a new build context.\nCreate a new draw context.\nCreate a new event context.\nCreate a new layout context.\nCreate a new rebuild context.\nCreate a new context.\nDraw an overlay, at <code>index</code>.\nGet the <code>CommandProxy</code>.\nDraw a rectangle with rounded corners and a border.\nGet a rebuild context.\nGet a rebuild context.\nGet a rebuild context.\nGet the rect of the view in local space.\nGet the rect of the view in local space.\nGet the rect of the view in local space.\nPop a context.\nRemove a context.\nRequest a draw of the view tree.\nRequest a draw of the view tree.\nRequest a draw of the view tree.\nRequest a draw of the view tree.\nRequest a layout of the view tree.\nRequest a layout of the view tree.\nRequest a layout of the view tree.\nRequest a rebuild of the view tree.\nDraw a layer with a rotation.\nSet whether the view is active.\nSet whether the view is active.\nSet whether the view is active.\nSet the flex of the view.\nSet the flex of the view.\nSet the flex of the view.\nSet whether the view is focused.\nSet whether the view is focused.\nSet whether the view is focused.\nSet whether the view is hot.\nSet whether the view is hot.\nSet whether the view is hot.\nSet whether the view is tight.\nSet whether the view is tight.\nSet whether the view is tight.\nGet the size of the view.\nGet the size of the view.\nGet the size of the view.\nSpawn a future.\nStroke a curve.\nDraw a text buffer.\nDraw a raw text buffer.\nGet the transform of the view.\nGet the transform of the view.\nDraw a layer with a translation.\nDraw a trigger rectangle.\nDraw a layer that does not affect the canvas.\nGet whether the view was active last call.\nGet whether the view was focused last call.\nGet whether the view was hot last call.\nGet the window.\nGet the window.\nGet the window.\nGet the window.\nGet the window.\nAn animation frame has passed.\nThe back button.\nEvent emitted when a window wants to close.\nThe window requested to be close.\nA keyboard key.\nA command was sent.\nAn event that can be sent to a view.\nThe forward button.\nAn event fired when a key is pressed.\nA keyboard key was pressed.\nAn event fired when a key is released.\nA keyboard key was released.\nModifiers for keyboard and pointer events.\nOther buttons.\nA pointer button.\nA unique pointer id.\nA pointer left the window.\nA pointer left the window.\nA pointer was moved.\nA pointer moved.\nA pointer button was pressed.\nA pointer button was pressed.\nA pointer button was released.\nA pointer button was released.\nA pointer wheel was scrolled.\nA pointer was scrolled.\nThe primary button, usually the left mouse button or the …\nThe secondary button, usually the right mouse button.\nThe tertiary button, usually the middle mouse button.\nThe hovered views have changed.\nEvent emitted when a window is resized.\nThe window was resized.\nEvent emitted when a window is scaled.\nThe window was scaled.\nWhether the alt key is held down.\nCheck if any modifiers are held down.\nGet the digit of the key, if it is a digit.\nGet the unique id as a <code>u64</code>.\nThe button of the pointer.\nThe button of the pointer.\nWhether the button was clicked.\nTry to get the command as a specific type.\nThe key that was pressed or released.\nThe key that was pressed or released.\nWhether the control key is held down.\nThe delta of the pointer.\nThe delta of the pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new pointer id from a hashable value.\nCreate a new pointer id from a <code>u64</code>.\nThe new height of the window.\nThe unique id of the pointer.\nThe unique id of the pointer.\nThe unique id of the pointer.\nThe unique id of the pointer.\nThe unique id of the pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the <code>key</code> is pressed.\nCheck if the <code>key</code> is released.\nCheck if the event is a command of a specific type.\nWhether the meta key is held down.\nThe modifiers that were active.\nThe modifiers that were active.\nThe modifiers of the pointer.\nThe modifiers of the pointer.\nThe modifiers of the pointer.\nThe modifiers of the pointer.\nThe position of the pointer.\nThe position of the pointer.\nThe position of the pointer.\nThe position of the pointer.\nThe new scale factor of the window.\nWhether the shift key is held down.\nGet the new size of the window.\nThe text that was entered.\nThe new width of the window.\nThe window that wants to close.\nThe window that was resized.\nThe window that was scaled.\nA texture managed by the rendering backend.\nAn clonable image.\nAn <code>Image</code> texture.\nImage data.\nA unique identifier for an <code>Image</code>.\nA texture.\nAn opaque backend texture identifier.\nA weak reference to an <code>Image</code>.\nMultiply the image with a color.\nCompute the id for this image data.\nGet the pixels.\nGet the pixels mutably.\nDowngrade the image to a weak reference.\nGet the filter mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>TextureId</code> from an index.\nGet a pixel.\nGet the height of the image in pixels.\nGet the <code>ImageId</code>.\nGet the <code>ImageId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModify the image data.\nPremultiply the image alpha.\nCreate a new image data.\nCreate a new image.\nCreate a new <code>TextureId</code>.\nPremultiply the image alpha, returning a new image.\nSet the filter mode.\nSet a pixel.\nGet the size of the image in pixels.\nGet the number of strong references to the image.\nConvert the <code>TextureId</code> to an index.\nGet the number of weak references to the image.\nGet the width of the image in pixels.\nAn affine transformation in 2 dimensional space.\nThe alignment of items along the cross axis.\nAlignment of content inside a container.\nAn axis is a direction in which a layout is applied.\nAlign the content at the bottom of the container.\nAlign the content at the bottom left of the container.\nAlign the content at the bottom right of the container.\nAlign the content at the center of the container.\nItems are packed toward the center of the stack.\nItems are packed toward the center of the stack.\nItems are packed toward the end of the stack.\nItems are packed toward the end of the stack.\nInfinity (∞). Use <code>f32::INFINITY</code> instead.\nAlias for <code>Self::INFINITY</code>.\nThe infinite space.\nThe horizontal axis.\nThe identity transformation.\nThe identity matrix.\nThe infinite size.\nThe justify content of a stack container.\nAn iterator over the positions of items in a stack …\nAlign the content at the left of the container.\nA 2x2 matrix.\nThe negative unit x point.\nThe negative unit x vector.\nThe negative unit y point.\nThe negative unit y vector.\nThe one point.\nThe one vector.\nA padding of a rectangle.\nA point in 2D space.\nAlign the content at the right of the container.\nA rectangle defined by its minimum and maximum points.\nA 2 dimensional size.\nSpace available to lay out a view.\nItems are evenly distributed in the stack, with half-size …\nItems are evenly distributed in the stack, with equal-size …\nItems are evenly distributed in the stack.\nItems are packed toward the start of the stack.\nItems are packed toward the start of the stack.\nItems are stretched to fill the stack.\nAlign the content at the top of the container.\nAlign the content at the top left of the container.\nAlign the content at the top right of the container.\nThe unbounded size.\nThe unbounded space.\nA 2D vector.\nThe vertical axis.\nThe unit x point.\nThe unit x vector.\nThe unit y point.\nThe unit y vector.\nThe zero point.\nA rectangle with zero area.\nThe zero size.\nThe zero space.\nThe zero vector.\nAlign the content inside the container.\nAligns an item within the given space.\nCreate a new <code>Padding</code> with the same value for all sides.\nCreate a new point with the same x and y.\nCreate a new size with the same width and height.\nCreate a new vector with the same x and y.\nGet the angle of the vector.\nGet the angle between self and other.\nGet the area of the rectangle.\nGet the bottom center point of the rectangle.\nThe bottom padding.\nGet the bottom left point of the rectangle.\nGet the bottom right point of the rectangle.\nCeil the point by element.\nCeil self by element.\nCeil the vector by element.\nGet the center point of the rectangle.\nCreate a new rectangle with the given center point and …\nClamp self to the range [min, max] by element.\nClamp the rectangle to the given rectangle.\nClamp self to the range [min, max] by element.\nClamp self to the range [min, max] by element.\nGet the most constraning space between <code>self</code> and `other\nCompute the closest point in the rectangle to the given …\nCompute whether the rectangle contains the given point.\nGet the length of the cross product of self and other.\nCompute the determinant of the matrix.\nCompute the dot distance between two points.\nGet the dot product of self and other.\nExpand the rectangle by the given amount.\nExpand the space by <code>size</code>.\nIf self is finite, return self, otherwise return zero. …\nClamp a size to the space.\nFloor the point by element.\nFloor self by element.\nFloor the vector by element.\nGet the fractional component by element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new matrix from an angle.\nCreate a new vector from an angle.\nCreate a new matrix from a scale.\nCreate a new space with the same minimum and maximum size.\nHat the vector.\nGet the height of the rectangle.\nThe height.\nExpand the rectangle to contain the given point.\nCompute the intersection of the rectangle with the given …\nCheck if the rectangle intersects the given rectangle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the inverse transformation.\nCompute the inverse of the matrix.\nCheck if the point is finite.\nGet whether the size is finite.\nGet whether the space is finite.\nCheck if the point is infinite.\nGet whether the size is infinite.\nGet whether the space is infinite.\nReturns true if the alignment is stretch.\nLayout the items in a stack container.\nGet the left center point of the rectangle.\nThe left padding.\nGet the length of the vector.\nGet the length of the vector squared.\nLinearly interpolate between two points.\nLoosen the space, setting the minimum size to zero.\nLoosen the height, setting the minimum height to zero.\nLoosen the width, setting the minimum width to zero.\nGet the major component of a pair.\nThe matrix of the affine transformation.\nGet the max of self and other by element.\nGet the max of self and other by element.\nGet the max of self and other by element.\nThe maximum point of the rectangle.\nMaximum size the view can be.\nGet the largest element of self.\nCreate a new rectangle with the given maximum point and …\nGet the min of self and other by element.\nGet the min of self and other by element.\nGet the min of self and other by element.\nThe minimum point of the rectangle.\nMinimum size the view can be.\nGet the smallest element of self.\nCreate a new rectangle with the given minimum point and …\nGet the minor component of a pair.\nCreate a new alignment.\nCreate a new matrix.\nCreate a new <code>Padding</code>.\nCreate a new point.\nCreate a new rectangle with the given minimum and maximum …\nCreate a new size.\nCreate a new space.\nCreate a new vector.\nNormalize the vector.\nGet the offset of the padding.\nPack a major and minor component into a pair.\nGet the right center point of the rectangle.\nThe right padding.\nCreate a rotation.\nRound the translation.\nRound the point by element.\nRound the rectangle’s minimum point down and its maximum …\nRound self by element.\nRound the vector by element.\nCreate a scale.\nShrink the rectangle by the given amount.\nShrink the space by <code>size</code>.\nGet the absolute value of the vector.\nGet the size of the padding.\nGet the size of the rectangle.\nConvert the size to a vector.\nConvert the vector to a vector.\nConvert the point to a size.\nConvert the vector to a size.\nConvert the point to a vector.\nConvert the size to a vector.\nGet the top center point of the rectangle.\nThe top padding.\nGet the top left point of the rectangle.\nGet the top right point of the rectangle.\nTransform the rectangle by the given affine transform.\nCrate a translation.\nThe translation of the affine transformation.\nCompute the intersection of the rectangle with the given …\nCompute the union of the rectangle with the given …\nUnpack a pair into it’s (major, minor) components.\nGet the width of the rectangle.\nThe width.\nThe horizontal alignment.\nThe x axis of the matrix.\nThe x coordinate.\nThe x coordinate.\nThe vertical alignment.\nThe y axis of the matrix.\nThe y coordinate.\nThe y coordinate.\nInfinity (∞). Use <code>f32::INFINITY</code> instead.\nDerive the <code>Rebuild</code> trait.\nDerive the <code>Rebuild</code> trait.\nConstructs an event at the debug level.\nConstructs an event at the error level.\nLoad a font from a file or directory.\nConstructs an event at the info level.\nConstructs an event at the trace level.\nConstructs an event at the warn level.\nA convenience trait for rebuilding a <code>View</code>.\nDerive the <code>Rebuild</code> trait.\nRebuild the view.\nA color palette.\nA trait for styling a value.\nA map of style values.\nThe accent color.\nThe low emphasis accent color.\nRun a function with the given style as the current style.\nThe background color.\nSet a value in a style returning the style.\nBuild a value in a style.\nGet the current style.\nThe contrast color.\nThe danger color.\nThe low emphasis danger color.\nThe default dark palette.\nCreate a new palette, derived from the given colors.\nExtend the style with another style.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from the current style.\nThe info color.\nThe low emphasis info color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe default light palette.\nCreate a new style.\nGet the palette of the style.\nGet the palette of the style.\nThe primary color.\nThe low emphasis primary color.\nThe secondary color.\nThe low emphasis secondary color.\nSet a value in a style.\nGet a snapshot of the current style.\nGet a value from the current style.\nStyle a value.\nGet a value from the current style or a default value.\nRun a closure with the given style.\nThe success color.\nThe low emphasis success color.\nThe surface color.\nThe high emphasis surface color.\nThe higher emphasis surface color.\nThe highest emphasis surface color.\nThe low emphasis surface color.\nThe lower emphasis surface color.\nTry getting a value from the current style.\nTry getting a value from the current style.\nThe warning color.\nThe low emphasis warning color.\nSet a value in a style returning the style.\nBlack font weight (900), the boldest possible.\nBold font weight (700).\nA cached glyph.\nAlign text in the center.\nCondensed font stretch.\nA cursive font family.\nA font loaded from data.\nExtra-bold font weight (800).\nExtra-light font weight (200).\nAlign text at the end.\nExpanded font stretch.\nExtra-condensed font stretch.\nExtra-expanded font stretch.\nA fantasy font family.\nA font family, by default <code>FontFamily::SansSerif</code>.\nA source for a font.\nA font stretch.\nA font style.\nA font weight.\nA context for loading and rasterizing fonts.\nItalic font style.\nLight font weight (300).\nMedium font weight (500).\nA monospace font family.\nNormal font weight (400), the default.\nA font family by name, e.g. “Arial”.\nDo not wrap text.\nNormal font stretch, the default.\nNormal font style, the default.\nOblique font style.\nA font loaded from a file.\nSemi-bold font weight (600).\nA sans-serif font family.\nSemi-condensed font stretch.\nSemi-expanded font stretch.\nA serif font family.\nA collection of fonts.\nAlign text at the start.\nThin font weight (100), the thinnest possible.\nAlignment of a section of text.\nAttributes of a section of text.\nA convenient wrapper around a <code>cosmic_text::Buffer</code>.\nWrapping of a section of text.\nUltra-condensed font stretch.\nUltra-expanded font stretch.\nWrap text at the word boundary.\nConvert the font family to a <code>fontdb::Family</code>.\nGet the bounds of the text buffer.\nCalculates the size of a text buffer.\nRasterize a buffer.\nThe font family of the text.\nThe font system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new text buffer from a raw buffer.\nThe glyph cache.\nThe image of the glyph.\nLoad a font from a file or directory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a font from a <code>FontSource</code>.\nLoads the system fonts.\nCreate a new text buffer.\nCreates a new font context.\nThe offset of the glyph.\nGet the raw buffer.\nGet the raw buffer mutably.\nGet the rect of the text buffer.\nSet the align of the text buffer.\nSet the bounds of the text buffer.\nSet the metrics of the text buffer.\nSet the text of the text buffer.\nSet the wrapping mode of the text buffer.\nGet the size of the text buffer.\nThe size of the glyph.\nThe font size of the text.\nThe font style of the text.\nThe swash cache.\nConvert the text align to a <code>cosmic_text::Align</code>.\nConvert the text wrap to a <code>cosmic_text::Wrap</code>.\nConvert the text attributes to a <code>cosmic_text::Attrs</code>.\nConvert the font weight to a <code>fontdb::Weight</code>.\nConvert the font stretch to a <code>fontdb::Stretch</code>.\nConvert the font style to a <code>fontdb::Style</code>.\nThe font weight of the text.\nAn ease transition curve.\nA transition easing curve.\nA linear transition curve.\nA transition.\nCheck if the transition is complete.\nThe duration of the transition.\nCreate an ease transition with the given <code>duration</code>.\nCreate an ease transition with the given <code>duration</code>.\nThe easing curve.\nEvaluate the easing at <code>t</code> where <code>0 &lt;= t &lt;= 1</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvaluate the transition curve at <code>t</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a linear transition with the given <code>duration</code>.\nCreate a linear transition with the given <code>duration</code>.\nStep the transition.\nThe view is active.\nThe view needs an animation frame.\nThe state of a <code>BoxedView</code>.\nA view that supports dynamic dispatch.\nA boxed dynamic view.\nThe view needs to be drawn.\nThe view is focusable.\nThe view is focused.\nEquivalent to …\nThe view has an active child.\nThe view has a focused child.\nThe view has a hot child.\nThe view is hot.\nEquivalent to <code>Self::HOT | Self::FOCUSED | Self::ACTIVE</code>.\nThe view needs to be laid out.\nA view that has separate <code>ViewState</code> from its content.\nContents of a view, in a sequence.\nThe state of a <code>PodSeq</code>.\nThe state of a <code>Pod</code>.\nThe state of the sequence.\nThe state of the view, see top-level documentation for …\nFlags that indicate what needs to be updated.\nA single UI component.\nFlags that indicate state of a view.\nAn opaque unique identifier for a view.\nA sequence of views.\nState associated with a <code>View</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nCreate a new <code>BoxedView</code>.\nGet a reference to the underlying <code>Any</code> object.\nGet the underlying id as a <code>u64</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild the sequence state.\nBuild the view state, see top-level documentation for more …\nBuild a pod view.\nBuild the sequence state.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nGet the cursor of the view.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDraw the view, see top-level documentation for more …\nDraw a pod view.\nDraw the nth view.\nDraw the nth view.\nBuild the view.\nDraw the view.\nHandle an event.\nCalculate the layout.\nRebuild the view.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nHandle an event, see top-level documentation for more …\nHandle an event.\nHandle an event for the nth view.\nHandle an event for the nth view.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the flags of the view.\nGet the flex of the view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nWhether any of the views in the sequence are active.\nGet whether the view has an active child.\nGet whether the view has a focused child.\nGet whether the view has a hot child.\nGet the id of the view.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether the view is active.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether the sequence is empty.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nGet whether the view is flexible.\nGet whether the view is focusable.\nGet whether the view is focused.\nGet whether the view is hot.\nGet whether the view is tight.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLayout the view, see top-level documentation for more …\nLayout a pod view.\nLayout the nth view.\nLayout the nth view.\nThe length of the sequence.\nThe length of the sequence.\nMark the view as animated.\nMark the view as drawn.\nMark the view as laid out.\nGet whether the view needs an animation frame.\nGet whether the view needs to be drawn.\nGet whether the view needs to be laid out.\nCreate a new pod view.\nCreate a new <code>PodSeq</code>.\nCreate a new <code>ViewId</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCreate a new <code>Pod</code> view.\nPrepare the view.\nPropagate the state of a child view.\nRebuild the sequence state.\nRebuild the view state, see top-level documentation for …\nRebuild a pod view.\nRebuild the sequence state.\nRebuild the nth view.\nRebuild the nth view.\nGet the rect of the view in local coordinates.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRequest an animation frame of the view tree.\nRequest a draw of the view tree.\nRequest a layout of the view tree.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet whether the view is active.\nSet the cursor of the view.\nSet the flex of the view.\nSet whether the view is focusable.\nSet whether the view is focused.\nSet whether the view is hot.\nSet the size of the view.\nSet whether the view is tight.\nSet the transform of the view.\nGet the size of the view.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the transform of the view.\nTranslate the transform of the view.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the <code>Update</code> of the view.\nSet the state to <code>active</code>.\nA view that aligns its content.\nA view that animates.\nA view that hooks into the build cycle.\nA button.\nThe style of a button.\nA checkbox.\nThe style of a <code>Checkbox</code>.\nA click handler.\nA collapsing view.\nThe style of a collapsing view.\nA color picker.\nThe style of a color picker.\nA view that constrains its content to a given space.\nA container view.\nThe style of a <code>Container</code>.\nA view that hooks into the draw cycle.\nA dropdown view.\nA view that handles events.\nA flexible view.\nA view that focuses on a part of the data.\nA view that builds its content based on the layout …\nA lens used by <code>Focus</code>.\nA view that only builds the inner view when certain data …\nA view that bridges the gap between <code>impl View</code> and …\nA view that adds padding to its content.\nA view that draws something.\nA view that handles rebuilds.\nA scrollable view.\nA slider.\nThe style of a slider.\nA view that stacks it’s content in a line.\nA view that displays text.\nA text input.\nThe style of a text input.\nThe style of a text.\nA view that displays some text when the content is hovered.\nThe style of a tooltip.\nA view that transforms its content.\nA view that creates a trigger around the content.\nA view that stores some additional data.\nA view that lays out it’s content in a line wrapping if …\nA view that overlays its content on top of each other.\nSet the build callback for after the <code>content</code> is built.\nSet the callback for when an event is emitted.\nThe build callback.\nThe callback after an event is propagated.\nCreate a new <code>Aligned</code> view.\nSet <code>self.align</code>.\nSet <code>self.align</code>.\nSet <code>self.align</code>.\nSet <code>self.align</code>.\nHow to align the content along the cross axis, within each …\nThe horizontal alignment of the text.\nThe horizontal alignment of the text.\nThe horizontal alignment of the text.\nThe vertical alignment of the text.\nThe horizontal alignment of the text.\nThe horizontal alignment of the text.\nHow to align the content along the cross axis.\nThe alignment.\nSet <code>self.alpha_color</code>.\nThe color of the alpha slider.\nThe color of the alpha slider.\nCreate a new <code>Animate</code>.\nThe animation callback.\nCreate a new <code>Stack</code>, with dynamic content.\nCreate a new <code>Wrap</code>, with dynamic content.\nCreate a new horizontal <code>Stack</code>, with dynamic content.\nCreate a new vertical <code>Stack</code>, with dynamic content.\nSet <code>self.axis</code>.\nSet <code>self.axis</code>.\nSet <code>self.axis</code>.\nThe axis of the scroll.\nThe axis of the slider.\nThe axis of the slider.\nThe axis of the stack.\nThe axis.\nCreate a new <code>Container</code> with background.\nSet <code>self.background</code>.\nSet <code>self.background</code>.\nSet <code>self.background</code>.\nSet <code>self.background</code>.\nThe background color.\nThe background color.\nThe background color of the header.\nThe background color of the header.\nThe background color.\nThe background color.\nThe background color of the slider.\nThe background color of the slider.\nThe background color of the text.\nThe background color of the text.\nSet the callback for before an event is emitted.\nThe callback before an event is propagated.\nSet the border width of the bottom edge.\nSet the border width of the bottom edge.\nSet <code>self.border_color</code>.\nSet <code>self.border_color</code>.\nSet <code>self.border_color</code>.\nSet <code>self.border_color</code>.\nSet <code>self.border_color</code>.\nSet <code>self.border_color</code>.\nThe border color of the button.\nThe border color.\nThe border color.\nThe border color.\nThe color of the border of the header.\nThe color of the border of the header.\nThe border color of the color picker.\nThe border color of the color picker.\nThe border color.\nThe border color.\nThe border color of the slider.\nThe border color of the slider.\nThe border color of the text.\nThe border color of the text.\nSet the border width of the left edge.\nSet the border width of the left edge.\nSet <code>self.border_radius</code>.\nSet <code>self.border_radius</code>.\nSet <code>self.border_radius</code>.\nSet <code>self.border_radius</code>.\nSet <code>self.border_radius</code>.\nThe border radius of the button.\nThe border radius.\nThe border radius.\nThe border radius.\nThe border radius of the header.\nThe border radius of the header.\nThe border radius.\nThe border radius.\nThe radius of the scrollbar.\nThe border radius of the slider.\nThe border radius of the slider.\nThe border radius of the text.\nThe border radius of the text.\nSet the border width of the right edge.\nSet the border width of the right edge.\nSet the border width of the top edge.\nSet the border width of the top edge.\nSet <code>self.border_width</code>.\nSet <code>self.border_width</code>.\nSet <code>self.border_width</code>.\nSet <code>self.border_width</code>.\nSet <code>self.border_width</code>.\nSet <code>self.border_width</code>.\nThe border width of the button.\nThe border width.\nThe border width.\nThe border width.\nThe border width of the header.\nThe border width of the header.\nThe border width of the color picker.\nThe border width of the color picker.\nThe border width.\nThe border width.\nThe border width of the slider.\nThe border width of the slider.\nThe border width of the text.\nThe border width of the text.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Button</code>.\nSet <code>self.button</code>.\nThe button to listen for.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Checkbox</code>.\nSet <code>self.checked</code>.\nWhether the checkbox is checked.\nCreate a new <code>Painter</code> view that draws a circle.\nCreate a new <code>Clickable</code>.\nCreate a new <code>Collapsing</code>.\nSet <code>self.color</code>.\nSet <code>self.color</code>.\nSet <code>self.color</code>.\nSet <code>self.color</code>.\nSet <code>self.color</code>.\nSet <code>self.color</code>.\nThe color of the button.\nThe color of the button.\nThe color of the checkbox.\nThe color of the checkbox.\nThe color of the color picker.\nThe color of the scrollbar.\nThe foreground color of the slider.\nThe foreground color of the slider.\nThe color of the text.\nThe color of the text.\nThe color of the text.\nThe color of the text.\nThe color of the text.\nThe color of text.\nCreate a new <code>ColorPicker</code>.\nSet <code>self.column_gap</code>.\nThe gap between each column.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nCreate a new <code>Container</code>.\nSet <code>self.content</code>.\nThe content.\nThe content.\nThe builder function.\nThe content view.\nThe content.\nThe content.\nThe content to align.\nThe content.\nThe content.\nThe content.\nThe content to constrain.\nThe content.\nThe content of the dropdown.\nThe content.\nThe content of the view.\nThe content.\nThe content.\nThe content of the stack.\nThe content to display.\nThe content.\nThe content.\nThe content to overlay.\nSet <code>self.default_open</code>.\nWhether the view is open by default.\nThe delay before the tooltip is displayed.\nThe delay before the tooltip is displayed.\nSet <code>self.descendants</code>.\nWhether the item should be clickable when it’s …\nSet <code>self.draw</code>.\nThe draw function.\nCreate a new <code>Dropdown</code> view.\nCreate a new <code>Painter</code> view that draws an ellipse.\nCreate a new expanded <code>Flex</code> view.\nSet the flex value of the view.\nSet <code>self.fancy</code>.\nThe distance of the fancy effect.\nThe distance of the fancy effect.\nCreate a new <code>Flex</code> view.\nThe flex value of the view.\nCreate a new <code>Focus</code>.\nSet <code>self.font_family</code>.\nSet <code>self.font_family</code>.\nThe font family of the text.\nThe font family of the text.\nThe font family of the text.\nThe font family of the text.\nThe font family of the text.\nThe font family of the text.\nSet <code>self.font_size</code>.\nSet <code>self.font_size</code>.\nThe font size of the text.\nThe font size of the text.\nThe font size of the text.\nThe font size of the text.\nThe font size of the text.\nThe font size of the text.\nSet <code>self.font_stretch</code>.\nSet <code>self.font_stretch</code>.\nThe font stretch of the text.\nThe font stretch of the text.\nThe font stretch of the text.\nThe font stretch of the text.\nThe font stretch of the text.\nThe font stretch of the text.\nSet <code>self.font_style</code>.\nSet <code>self.font_style</code>.\nThe font style of the text.\nThe font.into of the text.\nThe font style of the text.\nThe font.into of the text.\nThe font style of the text.\nThe font style of the text.\nSet <code>self.font_weight</code>.\nSet <code>self.font_weight</code>.\nThe font weight of the text.\nThe font weight of the text.\nThe font weight of the text.\nThe font weight of the text.\nThe font weight of the text.\nThe font weight of the text.\nCreate a formatted <code>Text</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet <code>self.gap</code>.\nSet the gap for both the rows and columns.\nThe gap between children.\nThe header.\nThe header of the dropdown.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the minimum height.\nCreate a new horizontal <code>Stack</code>.\nCreate a new horizontal <code>Wrap</code>.\nCreate a new horizontal <code>Wrap</code>, with dynamic content.\nCreate a new horizontal <code>Wrap</code>, with a vector of content.\nCreate a new horizontal <code>Scroll</code>.\nCreate a horizontal <code>Stack</code>.\nCreate a horizontal <code>Stack</code>.\nCreate a horizontal <code>Stack</code>.\nCreate a horizontal <code>Stack</code>, with dynamic content.\nCreate a horizontal <code>Stack</code>, with vector content.\nCreate a horizontal <code>Wrap</code>.\nCreate a horizontal <code>Wrap</code>.\nCreate a horizontal <code>Wrap</code>.\nCreate a horizontal <code>Wrap</code>, with dynamic content.\nCreate a horizontal <code>Wrap</code>, with a vector of content.\nSet <code>self.icon_color</code>.\nThe color of the icon.\nThe color of the icon.\nSet <code>self.icon_size</code>.\nThe size of the icon.\nThe size of the icon.\nThe inset of the scrollbar.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether the stack is empty.\nGet whether the wrap is empty.\nSet <code>self.justify</code>.\nSet <code>self.justify</code>.\nHow to justify the content along the main axis.\nHow to justify the content along the main axis.\nSet <code>self.justify_cross</code>.\nHow to justify the content along the cross axis.\nThe color of the scrollbar knob.\nCreate a new <code>LayoutBuilder</code> view.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nGet the number of views in the stack.\nGet the number of views in the wrap.\nSet <code>self.length</code>.\nThe length of the slider.\nThe length of the slider.\nSet <code>self.lightness_color</code>.\nThe color of the lightness slider.\nThe color of the lightness slider.\nSet <code>self.line_height</code>.\nSet <code>self.line_height</code>.\nThe line height of the text.\nThe line height of the text.\nThe line height of the text.\nThe line height of the text.\nThe line height of the text.\nThe line height of the text.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the maximum height.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the maximum size.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the maximum width.\nCreate a new <code>Memo</code>.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the minimum height.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the minimum size.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the minimum width.\nSet <code>self.multiline</code>.\nWhether the input is multi-line.\nCreate a new <code>Animate</code>.\nCreate a new <code>BuildHandler</code>.\nCreate a new <code>DrawHandler</code>.\nCreate a new <code>Focus</code>.\nCreate a new <code>LayoutBuilder</code> view.\nCreate a new <code>Memo</code>.\nCreate a new opaque view.\nCreate a new <code>RebuildHandler</code>.\nCreate a new <code>Trigger</code>.\nCreate a new <code>WithState</code>.\nCreate a new aligned view.\nCreate a new <code>Button</code>.\nCreate a new <code>Checkbox</code>.\nCreate a new <code>Clickable</code>.\nCreate a new <code>Collapsing</code> view.\nCreate a new <code>ColorPicker</code>.\nCreate a new constrained view.\nCreate a new <code>Container</code>.\nCreate a new dropdown.\nCreate a new <code>EventHandler</code>.\nCreate a new flexible view.\nCreate a new <code>Pad</code> view.\nCreate a new <code>Painter</code> view.\nCreate a new scrollable view.\nCreate a new <code>Slider</code>.\nCreate a new <code>Stack</code>.\nCreate a new text.\nCreate a new text input view.\nCreate a new tooltip view.\nCreate a new <code>Transform</code> view.\nCreate a new <code>Wrap</code>.\nCreate a new overlay view.\nCreate a new <code>BuildHandler</code>.\nCreate a new <code>Clickable</code>, with an <code>on_click</code> callback.\nSet the callback for when the button is clicked.\nThe callback for when the button is clicked.\nCreate a new <code>DrawHandler</code>.\nSet the draw callback.\nThe draw callback.\nCreate a new <code>EventHandler</code>, with an after callback.\nCreate a new <code>EventHandler</code>, with a before callback.\nSet the on_input callback.\nSet the callback for when the value changes.\nSet the callback that is called when an input is received.\nThe on_input callback.\nThe callback for when the value changes.\nA callback that is called when an input is received.\nSet a callback for when the view is opened or closed.\nA callback for when the view is opened or closed.\nCreate a new <code>Clickable</code>, with an <code>on_press</code> callback.\nSet the callback for when the button is pressed.\nThe callback for when the button is pressed.\nCreate a new <code>RebuildHandler</code>.\nCreate a new <code>Clickable</code>, with an <code>on_release</code> callback.\nSet the callback for when the button is released.\nThe callback for when the button is released.\nSet the callback that is called when the input is …\nA callback that is called when the input is submitted.\nA view that bridges the gap between <code>impl View</code> and …\nSet <code>self.open</code>.\nWhether the view is open.\nCreate a new <code>Pad</code> view.\nCreate a new <code>Pad</code> view adding padding to the bottom.\nCreate a new <code>Pad</code> view adding padding to the left.\nCreate a new <code>Pad</code> view adding padding to the right.\nCreate a new <code>Pad</code> view adding padding to the top.\nSet <code>self.padding</code>.\nThe padding of the button.\nThe padding.\nThe padding.\nThe padding of the tooltip.\nThe padding of the text.\nCreate a new <code>Painter</code> view.\nSet <code>self.placeholder</code>.\nPlaceholder text to display when the input is empty.\nSet <code>self.placeholder_color</code>.\nThe color of the placeholder text.\nThe color of the placeholder text.\nPush a view to the stack.\nPush a view to the wrap.\nSet <code>self.range</code>.\nThe range of the slider.\nThe callback for when a rebuild is requested.\nCreate a new <code>Painter</code> view that draws a rectangle.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Transform</code> view that rotates its content.\nCreate a new <code>Transform</code> view that rotates its content in …\nSet <code>self.row_gap</code>.\nThe gap between each row.\nCreate a new <code>Transform</code> view that scales its content.\nCreate a new <code>Constrain</code>ed view, cosntraining its content to …\nSet <code>self.size</code>.\nSet <code>self.size</code>.\nSet <code>self.size</code>.\nThe size of the checkbox.\nThe size of the checkbox.\nThe size of the color picker.\nThe size of the color picker.\nThe size of the view.\nCreate a new <code>Slider</code>.\nSet <code>self.slider_width</code>.\nThe width of the sliders.\nThe width of the sliders.\nThe space to constrain the content to.\nSet <code>self.stroke</code>.\nThe stroke width of the checkbox.\nThe stroke width of the checkbox.\nCreate a new <code>Button</code> with a style.\nCreate a new <code>Checkbox</code> with a style.\nCreate a new <code>Collapsing</code> view with a style.\nCreate a new <code>ColorPicker</code> with the given style.\nCreate a new <code>Container</code> with a style.\nCreate a new <code>Slider</code> with a style.\nCreate a new text with a style.\nCreate a new text input view with a style.\nCreate a new tooltip view with a style.\nCreate a new <code>Text</code>.\nSet <code>self.text</code>.\nSet the text of the input.\nThe text.\nThe text.\nThe text to display.\nCreate a formatted <code>Text</code>.\nCreate a new <code>TextInput</code>.\nWhether the view is tight.\nSet whether the dropdown is toggled.\nWhether the dropdown is toggled.\nCreate a new <code>Tooltip</code> view.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Aligned</code> view that aligns its content to the …\nCreate a new <code>Transform</code> view.\nThe transform.\nAnimate a transition.\nSet <code>self.transition</code>.\nSet <code>self.transition</code>.\nSet <code>self.transition</code>.\nThe transition of the button.\nThe transition of the button.\nThe transition of the checkbox.\nThe transition of the checkbox.\nThe transition of the view.\nThe transition of the view.\nThe transition of the scrollbar.\nAnimate a view when active changes.\nAnimate a view when focused changes.\nAnimate a view when hot changes.\nCreate a new <code>Transform</code> view that translates its content.\nCreate a new <code>Trigger</code> view.\nCreate a new constrained view, with no bounds.\nSet <code>self.value</code>.\nThe value of the slider.\nCreate a new <code>Stack</code>, with vector content.\nCreate a new <code>Wrap</code>, with a vector of content.\nCreate a new horizontal <code>Stack</code>, with vector content.\nCreate a new vertical <code>Stack</code>, with vector content.\nCreate a new vertical <code>Stack</code>.\nCreate a new vertical <code>Wrap</code>.\nCreate a new vertical <code>Wrap</code>, with dynamic content.\nCreate a new vertical <code>Wrap</code>, with a vector of content.\nCreate a new vertical <code>Scroll</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>, with dynamic content.\nCreate a vertical <code>Stack</code>, with vector content.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>, with dynamic content.\nCreate a vertical <code>Wrap</code>, with a vector of content.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nSet the minimum width.\nSet <code>self.width</code>.\nThe width of the scrollbar.\nThe width of the slider.\nThe width of the slider.\nPush a view to the stack.\nPush a view to the wrap.\nCreate a new <code>WithState</code>.\nCreate a new <code>WithState</code> using <code>S::default()</code>.\nCreate a new view unwrapping some data from the state.\nCreate a new view unwrapping some state from the data.\nSet <code>self.wrap</code>.\nSet <code>self.wrap</code>.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nCreate a new <code>ZStack</code> view.\nCreate a new <code>ZStack</code> view.\nCreate a new <code>ZStack</code> view.\nSet the color of the window.\nThe root <code>View</code> will have <code>Space::UNBOUNDED</code>, and the window …\nA mouse cursor icon.\nSet the cursor of the window.\nSet whether the window is decorated.\nThe window will have a fixed size equal to <code>Window::size</code>.\nSet the icon of the window.\nSet whether the window is maximized.\nThe state of a pointer.\nSet whether the window is resizable.\nSet the scale of the window.\nSet the size of the window.\nSet the title of the window.\nSet whether the window is visible.\nA window.\nA unique identifier for a window.\nThe sizing of a window.\nThe state of a window.\nAn update to a window.\nSet the color of the window.\nThe color of the window.\nThe color of the window.\nSet whether the window is decorated.\nWhether the window is decorated.\nWhether the window is decorated.\nGet the difference between a window and a previous state.\nSet the sizing to <code>WindowSizing::Content</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the pointer with <code>pointer_id</code>.\nGet the pointer with <code>pointer_id</code> mutably.\nGet the height of the window.\nThe view the pointer is over.\nSet the icon of the window.\nThe icon of the window.\nThe icon of the window.\nGet the unique identifier of the pointer.\nGet the unique identifier of the window.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether a specific view is hovered.\nGet whether <code>button</code> is held down on pointer with <code>pointer_id</code>.\nGet whether a button is pressed.\nSet whether the window is maximized.\nWhether the window is maximized.\nWhether the window is maximized.\nMove a pointer, returning the movement.\nCreate a new pointer.\nCreate a new <code>WindowId</code>.\nCreate a new <code>Window</code>.\nGet the size of the window in physical pixels.\nGet the pointers in the window.\nGet the pointers in the window mutably.\nThe position of the pointer.\nPress a button.\nPress a button on a pointer.\nRelease a button, returning whether the button was clicked.\nRelease a button on a pointer.\nRemove a pointer.\nSet whether the window is resizable.\nWhether the window is resizable.\nWhether the window is resizable.\nSet the scale of the window.\nThe scale of the window.\nThe scale of the window.\nSet the size of the window.\nThe size of the window.\nThe size of the window.\nSet the sizing of the window.\nThe sizing of the window.\nGet the <code>WindowSnapshot</code> of the window.\nSet the title of the window.\nThe title of the window.\nThe title of the window.\nUpdate the window.\nSet whether the window is visible.\nWhether the window is visible.\nWhether the window is visible.\nGet the width of the window.")