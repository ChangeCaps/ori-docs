searchState.loadedDescShard("ori", 1, "Styleing and theming.\nCreate a style key.\nAdd a style to the application.\nThe style to apply.\nThe style of <code>Button</code>.\nThe style of <code>Checkbox</code>.\nThe style of <code>Collapsing</code>.\nThe style of <code>ColorPicker</code>.\nThe style of <code>Container</code>.\nThe style of <code>Scroll</code>.\nThe style of <code>Slider</code>.\nThe style of <code>Text</code>.\nThe style of <code>TextInput</code>.\nThe style of <code>Tooltip</code>.\nGet the styles.\nGet the styles.\nGet the styles.\nGet the styles.\nGet the styles.\nThe success color.\nThe surface color.\nCreate a new <code>Suspense</code> view.\nTake all pending requests.\nCreate a new <code>Text</code>.\nDraw some text.\nGet the text of the paragraph.\nSet <code>self.text</code>.\nSet the text of the input.\nThe text that was entered.\nThe text.\nThe text.\nThe text to display.\nCreate a formatted <code>Text</code>.\nCreate a new <code>TextInput</code>.\nAdd a theme to the application.\nWhether the view is tight.\nSet the title of the window.\nThe title of the window.\nConvert the color to hex.\nConvert the color to a hue, saturation, lightness tuple.\nConvert the color to a hue, saturation, lightness and …\nConvert the color to a hue, saturation, value tuple.\nConvert the color to a hue, saturation, value and alpha …\nConvert a color from sRGB to okhsl.\nConvert a color from sRGB to okhsl.\nConvert a color from sRGB to okhsv.\nConvert a color from sRGB to okhsv.\nConvert a color from sRGB to oklab.\nConvert a color from sRGB to oklab.\nConvert a color from sRGB to oklch.\nConvert a color from sRGB to oklch.\nConvert the size to a vector.\nConvert the vector to a vector.\nConvert the color to linear sRGB.\nConvert the point to a size.\nConvert the vector to a size.\nConvert the color to linear sRGB.\nConvert the point to a vector.\nConvert the size to a vector.\nCreate a new <code>Tooltip</code> view.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nGet the top edge of the rectangle.\nThe top border width.\nThe top padding.\nGet the top center point of the rectangle.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nGet the top left point of the rectangle.\nThe top left corner radius.\nCreate a new <code>Aligned</code> view that aligns its content to the …\nGet the top right point of the rectangle.\nThe top right corner radius.\nConstructs an event at the trace level.\nCreate a new <code>Transform</code> view.\nGet the transform of the view.\nGet the transform of the view.\nTransform the curve by the given affine transform.\nTransform the rectangle by the given affine transform.\nGet the transform of the view.\nThe transformation of the pattern.\nThe transform.\nDraw a layer with a transform.\nDraw a layer with a transformation.\nAnimate a transition.\nSet <code>self.transition</code>.\nSet <code>self.transition</code>.\nSet <code>self.transition</code>.\nSet <code>self.transition</code>.\nThe transition of the button.\nThe style of <code>Button::transition</code>.\nThe transition of the checkbox.\nThe style of <code>Checkbox::transition</code>.\nThe transition of the view.\nThe style of <code>Collapsing::transition</code>.\nThe transition of the scrollbar.\nThe style of <code>Scroll::transition</code>.\nAnimate a view when active changes.\nAnimate a view when focused changes.\nAnimate a view when hovered changes.\nCreate a new <code>Transform</code> view that translates its content.\nCrate a translation.\nTranslate the transform of the view.\nDraw a layer with a translation.\nDraw a layer with a translation.\nThe translation of the affine transformation.\nCreate a new <code>Trigger</code> view.\nDraw a trigger rectangle.\nDraw a trigger rectangle.\nTry to parse a color from a hex string.\nCompute the intersection of the rectangle with the given …\nCreate a new constrained view, with no bounds.\nCompute the union of the rectangle with the given …\nUnpack a pair into it’s (major, minor) components.\nGet the <code>Update</code> of the view.\nUpdate the hovered state of a window.\nUpdate the window.\nCreate a style value.\nSet <code>self.value</code>.\nThe value of the slider.\nCreate a new <code>Stack</code>, with vector content.\nCreate a new <code>Wrap</code>, with a vector of content.\nCreate a new horizontal <code>Stack</code>, with vector content.\nCreate a new vertical <code>Stack</code>, with vector content.\nGet the verbs in the curve.\nCreate a new vertical <code>Stack</code>.\nCreate a new vertical <code>Wrap</code>.\nCreate a new vertical <code>Wrap</code>, with dynamic content.\nCreate a new vertical <code>Wrap</code>, with a vector of content.\nGet the view at a point.\nSet whether the window is visible.\nWhether the window is visible.\nCreate a new vertical <code>Scroll</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>, with dynamic content.\nCreate a vertical <code>Stack</code>, with vector content.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>, with dynamic content.\nCreate a vertical <code>Wrap</code>, with a vector of content.\nWake the event loop.\nCheck if the event wants to take focus.\nConstructs an event at the warn level.\nThe warning color.\nGet whether the view was active last call.\nGet whether the view was focused last call.\nGet whether the view was hovered last call.\nOnly include the annotated item on web platforms.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nGet the width of the image in pixels.\nGet the width of the rectangle.\nGet the width of the window.\nSet the minimum width.\nSet <code>self.width</code>.\nSet <code>self.width</code>.\nThe width of the stroke.\nThe width.\nThe width of the scrollbar.\nThe style of <code>Scroll::width</code>.\nThe width of the slider.\nThe style of <code>Slider::width</code>.\nAdd a window to the application.\nGet the window.\nGet the window.\nGet the window.\nGet the window.\nGet the window.\nThe window that wants to close.\nThe decorations state of a window changed.\nHandle an event for a single window.\nThe maximized state of a window changed.\nGet the window mutably.\nGet the window mutably.\nGet the window mutably.\nGet the window mutably.\nGet the window mutably.\nA window was resized.\nA window was scaled.\nInsert a style key.\nPush a view to the stack.\nPush a view to the wrap.\nCreate a new <code>WithState</code> that replaces the data with the …\nCreate a new <code>WithState</code> that replaces the data with the …\nCreate a new <code>WithState</code>.\nCreate a new <code>WithState</code> using <code>S::default()</code>.\nCreate a view that applies a style to its content.\nInsert a style key.\nInsert a styled value.\nCreate a new view unwrapping some data from the state.\nCreate a new view unwrapping some state from the data.\nSet <code>self.wrap</code>.\nSet <code>self.wrap</code>.\nThe text wrapping mode.\nThe text wrap of the text.\nThe style of <code>Text::wrap</code>.\nThe text wrap of the text.\nThe style of <code>TextInput::wrap</code>.\nThe text wrap of the text.\nThe style of <code>Tooltip::wrap</code>.\nThe horizontal alignment.\nThe x axis of the matrix.\nThe x coordinate.\nThe x coordinate.\nThe vertical alignment.\nThe y axis of the matrix.\nThe y coordinate.\nThe y coordinate.\nCreate a new <code>ZStack</code> view.\nCreate a new <code>ZStack</code> view.\nA computed style.\nA derived style.\nA style.\nA style key.\nA styled value.\nA collection of styles.\nA theme.\nA value.\nThe accent color.\nThe background color.\nCreate a computed style.\nThe contrast color.\nThe danger color.\nHash a style key.\nThe info color.\nThe outline color.\nThe primary color.\nThe secondary color.\nCreate a style key.\nThe success color.\nThe surface color.\nCreate a style value.\nThe warning color.")