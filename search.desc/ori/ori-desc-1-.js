searchState.loadedDescShard("ori", 1, "Animate a view when focused changes.\nAnimate a view when hot changes.\nCreate a new <code>Transform</code> view that translates its content.\nDraw a layer with a translation.\nCrate a translation.\nTranslate the transform of the view.\nThe translation of the affine transformation.\nCreate a new <code>Trigger</code> view.\nDraw a trigger rectangle.\nDraw a trigger rectangle.\nTry getting a value from the current style.\nTry to parse a color from a hex string.\nCompute the intersection of the rectangle with the given …\nCreate a new constrained view, with no bounds.\nCompute the union of the rectangle with the given …\nUnpack a pair into it’s (major, minor) components.\nGet the <code>Update</code> of the view.\nUpdate the hovered state of a window.\nUpdate the window.\nSet <code>self.value</code>.\nThe value of the slider.\nCreate a new <code>Stack</code>, with vector content.\nCreate a new <code>Wrap</code>, with a vector of content.\nCreate a new horizontal <code>Stack</code>, with vector content.\nCreate a new vertical <code>Stack</code>, with vector content.\nCreate a new vertical <code>Stack</code>.\nCreate a new vertical <code>Wrap</code>.\nCreate a new vertical <code>Wrap</code>, with dynamic content.\nCreate a new vertical <code>Wrap</code>, with a vector of content.\nDraw a layer with a view.\nGet the view at a point.\nSet whether the window is visible.\nWhether the window is visible.\nDraw a layer that does not affect the canvas.\nDraw a layer that does not affect the canvas.\nCreate a new vertical <code>Scroll</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>.\nCreate a vertical <code>Stack</code>, with dynamic content.\nCreate a vertical <code>Stack</code>, with vector content.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>.\nCreate a vertical <code>Wrap</code>, with dynamic content.\nCreate a vertical <code>Wrap</code>, with a vector of content.\nWake the event loop.\nConstructs an event at the warn level.\nThe warning color.\nThe low emphasis warning color.\nGet whether the view was active last call.\nGet whether the view was focused last call.\nGet whether the view was hot last call.\nCreate a new <code>Constrain</code>ed view, constraining its content to …\nGet the width of the image in pixels.\nGet the width of the rectangle.\nGet the width of the window.\nSet the minimum width.\nSet <code>self.width</code>.\nThe width of the stroke.\nThe width.\nThe width of the scrollbar.\nThe width of the slider.\nThe width of the slider.\nAdd a window to the application.\nGet the window.\nGet the window.\nGet the window.\nGet the window.\nGet the window.\nThe window that wants to close.\nHandle an event for a single window.\nA window was resized.\nA window was scaled.\nSet a value in a style returning the style.\nPush a view to the stack.\nPush a view to the wrap.\nSet the state to <code>active</code>.\nCreate a new <code>WithState</code>.\nCreate a new <code>WithState</code> using <code>S::default()</code>.\nCreate a new view unwrapping some data from the state.\nCreate a new view unwrapping some state from the data.\nSet <code>self.wrap</code>.\nSet <code>self.wrap</code>.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe text wrap of the text.\nThe horizontal alignment.\nThe x axis of the matrix.\nThe x coordinate.\nThe x coordinate.\nThe vertical alignment.\nThe y axis of the matrix.\nThe y coordinate.\nThe y coordinate.\nCreate a new <code>ZStack</code> view.\nCreate a new <code>ZStack</code> view.\nAn error that can occur when running an application.\nAn error occurred with the event loop.\nAn OS error.\nAn error occured with softbuffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLaunch an application.")